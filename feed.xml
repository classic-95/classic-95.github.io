<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Classic95의 블로그]]></title><description><![CDATA[누구나 쉽게 따라할 수 있는, 남녀노소 모두를 위한 개발 블로그]]></description><link>https://classic-95.com?utm_source=blog-feed&amp;utm_medium=feed&amp;utm_campaign=feed</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 27 Nov 2023 01:56:52 GMT</lastBuildDate><item><title><![CDATA[[자료구조] stack 구조에 대해 알아보자]]></title><description><![CDATA[여러 가지 예시와 실습 코드를 통해 stack 구조를 제대로 이해해보자.]]></description><link>https://classic-95.com/posts/2023/11/data-structure-stack/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/11/data-structure-stack/</guid><pubDate>Mon, 27 Nov 2023 01:35:02 GMT</pubDate><content:encoded>오늘은 자료 구조 중 stack 구조에 대해 알아봐요. 오늘 포스팅의 목표는 여러분이 이 포스팅의 썸네일을 이해하는 거에요!

1. stack 구조란?

사실 크게 어려울 건 없어요. 왜냐하면, stack 구조는 우리가 일상에서 너무 많이 접하는 구조이기 때문이죠.

옷을 넣는 수납함이 있다고 생각해보세요. 그 수납함에 옷을 차곡차곡 쌓아서 넣어놨는데 맨 아래에 있는 옷을 꺼내야한다고 가정해볼게요.

꺼내야 하는 옷 위에 다른 옷들을 건드리지 않고 꺼내야 하는 옷을 꺼낼 수 있을까요?

맞아요. 불가능하죠? 맨 아래 옷은 위 옷들을 전부 꺼낸 후에야 꺼낼 수 있어요.

이게 바로 stack 구조에요. 참 쉽죠?

이러한 구조를 우리는 LIFO(Last In First Out)구조라고 해요. 마지막에 들어간 게 처음으로 나온다. 여기까지만 이해하시면 이론은 끝입니다.

stack 구조라는 건 입구가 하나뿐인 바구니에 우리가 원하는 물건을 넣고 위에서부터 차례대로 빼는 거라고 생각하시면 편해요.

2. stack 구현

대부분의 언어들에서는 이미 stack, queue 등이 모두 최적화된 상태로 바로 사용할 수 있게 제공되기 때문에 C언어로 구현해볼게요.

사실 자료 구조 자체를 제대로 이해하고 구현할 수 있으면 언어는 크게 문제가 없어요. (문제 없다는 건 성능을 말하는 게 아니고 언어에 구애받지 않는 실력을 말하는 거에요.)

위에서 stack 구조를 이해해봤으니 이제 구현해봐요.

2-1. 필요한 변수

이해는 했는데 그럼 구현은 어떻게 해야될까요?

먼저 필요한 변수들을 정의해야해요.

구조체 형태로 Stack을 만들어봤는데요.

top

현재 스텍이 얼마나 차있는지를 의미하는 변수에요.

초기값을 -1로 두고 array에 값이 채워질 때마다 +1 해줘서 배열의 가장 마지막에 들어온 아이템을 가리키는 인덱스 역할을 해줄 거에요.

array

스텍을 쌓을 공간이에요. 위의 설명을 빌리자면 옷을 넣을 수납함인 거죠.

#define ARRAY_SIZE 6

typedef struct STACK…</content:encoded></item><item><title><![CDATA[[gatsby] Creating an mdx based blog-1]]></title><description><![CDATA[Let's create a blog based on mdx of the gatsby framework.]]></description><link>https://classic-95.com/en/posts/2023/11/gatsby-mdx-blog-1/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/gatsby-mdx-blog-1/</guid><pubDate>Mon, 13 Nov 2023 04:12:31 GMT</pubDate><content:encoded>There are three main frameworks that are most popular when creating markdown, md, or mdx-based blogs. Those are jekyll, Hugo, and Gatsby.

Among them, today we will learn how to create a blog using Gatsby.

1. Create a Gatsby installation environment

I will explain this separately into macOS and Windows, but if you have already installed each item, please scroll down immediately.

Of course, it is already well organized in the official document, so you can proceed by looking at the official document.

1-1-1. [macOS] Installing Node.js

First, let&apos;s start by assuming that Homebrew is installed.

If you haven&apos;t installed it yet, you can read this post and follow along.

With Homebrew installed, open a terminal and run the command below.

(If an error occurs during installation, log back in to the account you used to log in to your Mac on the Apple site and proceed again in the terminal.)

When the terminal asks you to agree to the software license, agree and proceed.

xcode-select --install


Afte…</content:encoded></item><item><title><![CDATA[[react-native] Solve ios simulator unable to boot device in current state: Booted error]]></title><description><![CDATA[Today, we will learn how to resolve the unable to boot device in current state: Booted error that often occurs when running the iOS simulator in react-native.]]></description><link>https://classic-95.com/en/posts/2023/11/react-native-unable-to-boot-device/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/react-native-unable-to-boot-device/</guid><pubDate>Sun, 12 Nov 2023 14:11:15 GMT</pubDate><content:encoded>Today, we will learn how to resolve the unable to boot device in current state: Booted error that often occurs when running the iOS simulator in react-native. To find out why the error occurs, the simulator is running.

Now, let’s find out how to solve it.

1. Resolution
1-1. Open ios simulator settings

With the iOS simulator turned on, click Simulator -&gt; Settings... in the menu bar at the top left, as shown in the image below.

Or, while turning on the simulator, press ⌘ + , together.

1-2. Change Simulator lifetime

As shown in the image below, uncheck When Simulator starts boot the most recently used simulator in the Simulator lifetime section.

References
stack overflow
Organizing

Today, we learned how to resolve the unable to boot device in current state: Booted error that often occurs when running the iOS simulator in react-native.

If you follow along with the images, you can solve the problem without much difficulty, so I hope you can solve it by following it step by step.</content:encoded></item><item><title><![CDATA[[react-native] Start screen transition with react-navigation]]></title><description><![CDATA[Let's learn about screen transitions in react-native using the react-navigation open source.]]></description><link>https://classic-95.com/en/posts/2023/11/react-native-react-navigation-1/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/react-native-react-navigation-1/</guid><pubDate>Sat, 11 Nov 2023 10:22:28 GMT</pubDate><content:encoded>Today, let&apos;s learn about screen transitions in react-native using react-navigation open source. First, you can follow it more easily if you turn on the official Document. It&apos;s nice that blog posts are simply organized, but it&apos;s a good idea to always get into the habit of reading official documents.

1. Create a project

First, let&apos;s create a project.

Open the terminal on Mac or cmd on Windows to create a react-native project.

I will create a react-native project named navigation.

# npx react-native init {your project name}
npx react-native init navigation

2. Install react-navigation

Let&apos;s install react-navigation along with the dependencies as stated in the official document.

# cd {your project name}
cd navigation

# react-navigation/native and react-navigation/stack 
# dependencies(react-native-screens, react-native-safe-area-context) of react-navigation/native
# dependency(react-native-gesture-handler) of react-navigation/stack
yarn add @react-navigation/native @react-navigation…</content:encoded></item><item><title><![CDATA[[react-native] Solve "launchPackager.command" can't be opened issue]]></title><description><![CDATA[Let's solve the "launchPackager.command" can't be opened ios simulator execution error that occurs after creating a new project in react-native 0.7 or later.]]></description><link>https://classic-95.com/en/posts/2023/11/react-native-launch-packager-command-cant-be-opened/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/react-native-launch-packager-command-cant-be-opened/</guid><pubDate>Mon, 06 Nov 2023 05:21:52 GMT</pubDate><content:encoded>Today, let&apos;s learn how to resolve the &quot;launchPackager.command&quot; can&apos;t be opened error that occurs when running the iOS simulator after react-native version 0.7. To find out why the error occurs, the problem occurs because you need to run a terminal to run the simulator, but the relevant permissions do not exist.

Now, let’s find out how to solve it.

1. Resolution
1-1. Open node_modules folder inside your project

Open the current project folder and open the node_modules folder.

1-2. Open react-native folder inside node_modules

Find and open the react-native folder inside the node_modules folder.

1-3. Open scripts folder inside react-native folder

Find and open the scripts folder inside ./node_modules/react-native folder.

1-4. Open launchPackager.command file with other program

Right-click the launchPackager.command file in the ./node_modules/react-native/scripts folder and click Open as shown in the image below.

1-5. Open app with iTerm.app

If you do not have iTerm2 installed…</content:encoded></item><item><title><![CDATA[[mac] Install iTerm2]]></title><description><![CDATA[Install iTemr2 on your Mac and create a colorful terminal with oh-my-zsh.]]></description><link>https://classic-95.com/en/posts/2023/11/install-iterm/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/install-iterm/</guid><pubDate>Sat, 04 Nov 2023 02:32:00 GMT</pubDate><content:encoded>Install iTemr2 on your Mac and create a colorful terminal with oh-my-zsh. 1. Install iTerm2

I will install it using brew.

If Homebrew is not installed, please install it following this post and come back.

Now, enter the command below into the terminal to install it.

brew install iterm2

2. Intsall oh-my-zsh

To apply various themes or functions such as autocomplete in iterm2, install oh-my-zsh, one of the zsh (Z shell) plugins.

sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;

3. Change iterm color scheme and settings
3-1. Choose a color scheme

Check and download various color schemes at the official Site.

Personally, I like pastel tones, so I downloaded and used the Snazzy color scheme below.

If you download any theme, double-click it and it will automatically be added to iTerm2&apos;s iTerm Color Preset.

To check, run iTerm2 and press ⌘ + , together.

Then, in the window shown below, select Profile -&gt; Colors -&gt; Color Presets.…</content:encoded></item><item><title><![CDATA[[macOS] Install m1 homebrew]]></title><description><![CDATA[Unlike Intel Macs, Macs with m1 or higher require a slightly additional homebrew installation process. Today we will learn how to install homebrew on an m1 Mac.]]></description><link>https://classic-95.com/en/posts/2023/11/install-homebrew/</link><guid isPermaLink="false">https://classic-95.com/en/posts/2023/11/install-homebrew/</guid><pubDate>Fri, 03 Nov 2023 12:42:15 GMT</pubDate><content:encoded>Unlike Intel Macs, Macs with m1 or higher require a slightly additional homebrew installation process. Today we will learn how to install homebrew on an m1 Mac.

1. Install homebrew

Open a terminal and run the command below.

/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

2. Verify homebrew installation
brew --version
# zsh: command not found: brew


For Intel Macs, the installation is complete, so you can find the version here and use the brew command!

In the case of m1 Mac, when the installation is completed and you enter the brew --version command to check, the message zsh: command not found: brew appears as shown below.

The reason this phrase appears is simple. This is because the location of the homebrew executable file is not set in the path.

3. Set homebrew path

Let&apos;s scroll up the terminal for a moment and see the response codes immediately after homebrew is installed. If you look at it, it kindly tells you about the next steps as…</content:encoded></item><item><title><![CDATA[[gatsby] mdx 기반 블로그 만들기-1]]></title><description><![CDATA[gatsby 프레임워크의 mdx 기반 블로그를 만들어봐요.]]></description><link>https://classic-95.com/posts/2023/09/gatsby-mdx-blog-1/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/gatsby-mdx-blog-1/</guid><pubDate>Fri, 08 Sep 2023 13:00:00 GMT</pubDate><content:encoded>markdown, md 또는 mdx 기반의 블로그를 만들 때 가장 많은 선택을 받는 프레임워크들은 크게 세 가지가 있죠. 바로 jekyll, Hugo, Gatsby인데요.

이 중 오늘은 Gatsby를 사용해서 블로그를 만드는 방법에 대해 알아보도록 해요.

1. Gatsby 설치 환경 만들기

macOS와 Windows로 나눠서 설명을 할 예정인데 각 항목별로 이미 설치하신 경우에는 바로 스크롤을 아래로 내려주세요.

물론 공식문서에도 이미 잘 정리되어 있으니 공식문서를 보고 진행하셔도 무방해요.

1-1-1. macOS Node.js 설치하기

우선 Homebrew가 설치됐다고 가정하고 시작할게요.

만약 아직 설치하기 전이라면 이 포스팅을 보고 따라하시면 되요.

brew가 설치된 상태에서 터미널을 열고 아래의 명령어를 실행 시켜요.

(만약 설치 중 오류가 발생하면 애플 사이트에서 맥에 로그인한 계정으로 다시 로그인한 후 터미널에서 다시 진행해주세요.)

이후에 소프트웨어 라이센스 동의 여부를 물어보면 동의하고 진행해주세요.

xcode-select --install


이후 homebrew를 사용해서 node.js를 설치해줘요.

brew install node

1-1-2. macOS Git 설치하기

git은 개발자라면 기본적으로 사용하는 프로그램이기 때문에 이미 다 설치한 상태겠지만 혹시나 해서 적어둘게요!

brew install git


설치 완료 후 Github 계정을 등록해주세요.

git config --global user.name &quot;your github name&quot;
git config --global user.email &quot;your github email&quot;

1-2-1. Windows Node.js 설치하기

Windows에서는 설치가 매우 간단해요.

공식 사이트를 방문해서 LTS가 붙은 버튼을 클릭해주세요.

그 후 다운받은 .exe 파일을 실행시켜주세요.

설치 중 이 화면이 나오면 체크박스를 클릭 후 진행해주세요!

1-2-2. Windows Git 설치하기

Gi…</content:encoded></item><item><title><![CDATA[[react-native] react-navigation으로 화면 전환 시작하기]]></title><description><![CDATA[react-navigation 오픈 소스를 사용하여 react-native에서의 화면 전환에 대해 알아보자.]]></description><link>https://classic-95.com/posts/2023/09/react-native-react-navigation-1/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/react-native-react-navigation-1/</guid><pubDate>Mon, 04 Sep 2023 13:13:42 GMT</pubDate><content:encoded>오늘은 react-navigation 오픈 소스를 사용하여 react-native에서의 화면 전환에 대해 알아보도록 해요. 우선 공식문서를 켜놓으시면 더 편하게 따라오실 수 있어요. 블로그 글도 간단하게 한글로 정리되서 좋지만 항상 공식문서를 읽는 습관을 들이는게 좋아요.

1. 프로젝트 만들기

우선 프로젝트를 한 번 만들어보도록 하죠.

mac이면 터미널 window면 cmd를 켜서 react-native 프로젝트를 만들어주세요.

저는 navigation이라는 이름의 react-native 프로젝트를 한 번 만들어볼게요.

# npx react-native init {프로젝트명}
npx react-native init navigation

2. react-navigation 설치

공식문서에서 말하는대로 dependencies와 함께 react-navigation을 설치해볼게요.

# cd {생성한 프로젝트명}
cd navigation

# react-navigation/native와 react-navigation/stack 
# react-navigation/native의 dependencies인 react-native-screens, react-native-safe-area-context
# react-navigation/stack의 dependency인 react-native-gesture-handler 를 함께 설치
yarn add @react-navigation/native @react-navigation/stack react-native-screens react-native-safe-area-context react-native-gesture-handler

2-1. ios 추가 작업

ios는 방금 설치한 모듈들을 연결하기 위해 pod install을 진행해줘야 해요.

cd ios
pod install
cd ..

2-2. android 추가 작업

android의 경우 android/app/src/main/java/&lt;프로젝트명&gt;/MainActivity…</content:encoded></item><item><title><![CDATA[[react-native] ios simulator unable to boot device in current state: Booted 오류 해결]]></title><description><![CDATA[오늘은 react-native에서 ios simulator를 실행시킬 때 종종 발생하는 unable to boot device in current state: Booted 오류를 해결하는 방법에 대해 알아봐요.]]></description><link>https://classic-95.com/posts/2023/09/react-native-unable-to-boot-device/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/react-native-unable-to-boot-device/</guid><pubDate>Sun, 03 Sep 2023 11:05:20 GMT</pubDate><content:encoded>오늘은 react-native에서 ios simulator를 실행시킬 때 종종 발생하는 unable to boot device in current state: Booted 오류를 해결하는 방법에 대해 알아봐요. 오류가 나는 이유부터 알아보자면 시뮬레이터가 실행 상태

그럼 이제 해결 방법에 대해 알아볼까요?

1. 해결 방법
1-1. ios simulator settings 켜기

ios 시뮬레이터를 켠 상태에서 아래의 이미지와 같이 좌측 상단의 메뉴바에서 Simulator -&gt; Settings... 를 클릭해주세요.

혹은 시뮬레이터를 켠 상태에서 ⌘ + ,를 함께 눌러주세요.

1-2. Simulator lifetime 변경

아래의 이미지와 같이 Simulator lifetime 부분의 When Simulator starts boot the most recently used simulator를 체크 해제해주세요.

참고
stack overflow
정리하며

오늘은 react-native에서 ios simulator를 실행시킬 때 종종 발생하는 unable to boot device in current state: Booted 오류를 해결하는 방법에 대해 알아봤어요.

이미지와 함께 보면서 따라오면 큰 어려움 없이 해결하실 수 있으니 차근차근 따라해서 해결하셨으면 좋겠어요.</content:encoded></item><item><title><![CDATA[[react-native] "launchPackager.command" can't be opened 오류 해결]]></title><description><![CDATA[react-native 0.7 이후 버전에서 새로운 프로젝트 생성 후 발생하는 "launchPackager.command" can't be opened ios simulator 실행 오류를 해결해보자.]]></description><link>https://classic-95.com/posts/2023/09/react-native-launch-packager-command-cant-be-opened/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/react-native-launch-packager-command-cant-be-opened/</guid><pubDate>Sun, 03 Sep 2023 00:15:20 GMT</pubDate><content:encoded>오늘은 react-native 0.7 버전 이후에 ios 시뮬레이터를 실행시키면 발생하는 &quot;launchPackager.command&quot; can&apos;t be opened 오류를 해결하는 방법에 대해 알아봐요. 오류가 나는 이유부터 알아보자면 시뮬레이터를 실행시키기 위해 터미널을 실행시켜야 하는데 해당 권한이 존재하지 않아서 발생하는 문제에요.

그럼 이제 해결 방법에 대해 알아볼까요?

1. 해결 방법
1-1. 프로젝트 폴더 node_modules 열기

현재 프로젝트의 폴더를 열어서 node_modules 폴더를 열어주세요.

1-2. react-native 폴더 열기

node_modules 폴더 안에서 react-native 폴더를 찾아서 열어주세요.

1-3. scripts 폴더 열기

./node_modules/react-native 폴더 안에서 scripts 폴더를 찾아서 열어주세요.

1-4. launchPackager.command 파일 다른 프로그램으로 열기

./node_modules/react-native/scripts 폴더 안에서 launchPackager.command 파일을 우클릭해서 아래 이미지와 같이 다른 파일로 열기를 클릭해요.

1-5. iTerm.app으로 앱 열기

만약 iTerm2가 설치되어 있지 않다면 이 포스팅을 먼저 봐주세요.

아래 이미지처럼 iTerm.app으로 앱을 설정하고 Always Open With 체크 박스를 클릭한 후 열기를 클릭해요.

1-6. iTerm 앱 확인

위에서 열기를 클릭하면 아래와 같이 iTerm이 실행되는 걸 확인하고 창을 꺼주세요.

1-7. 다시 앱 실행

원하시는 방식으로 앱을 실행시켜 주세요.

npm run ios

# or 
# yarn ios

정리하며

오늘은 react-native 0.7 버전 이후에 ios 시뮬레이터를 실행시키면 발생하는 &quot;launchPackager.command&quot; can&apos;t be opened 오류를 해결하는 방법에 대해 알아봤어요.

이미지와 함께 보면서 따라오면 큰…</content:encoded></item><item><title><![CDATA[[mac] iTerm2 설치]]></title><description><![CDATA[mac에 iTemr2를 설치하고 oh-my-zsh로 알록달록한 터미널을 만들어봐요.]]></description><link>https://classic-95.com/posts/2023/09/install-iterm/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/install-iterm/</guid><pubDate>Sat, 02 Sep 2023 13:00:00 GMT</pubDate><content:encoded>오늘은 mac 필수 앱인 iTerm2를 설치하고 기본 터미널과 다르게 알록달록하게 테마를 적용해봐요. 1. iTerm2 설치

설치는 brew로 해줄게요.

만약 Homebrew가 설치되어 있지 않으시면 이 포스팅을 따라서 설치하고 돌아와주세요.

이제 아래 명령어를 터미널에 입력해서 설치해주세요.

brew install iterm2

2. oh-my-zsh 설치

iterm2에서 여러 가지 테마를 적용하거나 자동완성 등의 기능을 적용하기 위해 zsh(Z shell)의 플러그인 중 하나인 oh-my-zsh를 설치해요.

sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;

3. iterm 컬러 스킴 및 설정 변경
3-1. 컬러 스킴 선택

공식 사이트에서 여러 컬러 스킴들을 확인 후 다운로드 받으세요.

저는 개인적으로 파스텔톤이 이뻐서 아래의 Snazzy 컬러 스킴을 다운로드해서 사용 중이에요.

어떤 테마든 다운로드 받으셨다면 더블 클릭하시면 자동으로 iterm2의 iTerm Color Preset에 추가되요.

확인하기 위해 iTerm2를 실행시킨 후 ⌘ + ,를 함께 눌러주세요.

그리고 나온 아래와 같은 창에서 Profile -&gt; Colors -&gt; Color Presets... -&gt; Snazzy(또는 다운받은 컬러 스킴)를 선택해주세요.

3-2. 한글 깨짐 방지

터미널에서 한글이 깨지는 경우가 많이 발생하는데 아래와 같이 설정해서 한글 깨짐을 방지해주세요.

위와 같은 창에서 Profile -&gt; Text -&gt; Unicode normalization form: NFC 로 변경해주세요.

3-3. 상태바 추가

위와 같은 창에서 Profile -&gt; Session -&gt; Status bar enabled를 체크해주시고 오른쪽의 Configure Status Bar를 클릭해주세요.

그럼 아래와 같은 창이 나오는데 터미널에 표시됐으면 하는…</content:encoded></item><item><title><![CDATA[[macOS] m1 homebrew 설치하기]]></title><description><![CDATA[인텔 맥과 다르게 m1 이상의 맥은 homebrew 설치 과정이 조금 추가되는데요. 오늘은 m1 맥에서 homebrew를 설치하는 방법에 대해 알아보도록 해요.]]></description><link>https://classic-95.com/posts/2023/09/install-homebrew/</link><guid isPermaLink="false">https://classic-95.com/posts/2023/09/install-homebrew/</guid><pubDate>Fri, 01 Sep 2023 21:42:15 GMT</pubDate><content:encoded>인텔 맥과 다르게 m1 이상의 맥은 homebrew 설치 과정이 조금 추가되는데요. 오늘은 m1 맥에서 homebrew를 설치하는 방법에 대해 알아보도록 해요.

1. homebrew 설치

터미널을 열어서 아래의 명령어를 실행시켜요.

/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

2. homebrew 설치 확인
brew --version
# zsh: command not found: brew


인텔 mac의 경우 설치가 완료된 것이니 여기서 버전이 나오고 brew 명령어를 이용해서 사용하세요!

m1 mac의 경우 설치가 완료되고 확인을 위해 brew --version 명령어를 입력하면 아래와 같이 zsh: command not found: brew 라는 문구가 떠요.

이 문구가 뜨는 이유는 간단해요. homebrew의 실행 파일의 위치를 path에 설정해두지 않아서 그런 거에요.

3. homebrew path 설정

잠시 터미널의 스크롤을 올려서 homebrew가 설치된 직후의 response 코드들 볼게요. 보면 아래와 같이 Next steps에 대해 친절하게 알려주는데 이게 homebrew의 path를 설정하는 방법이에요.

==&gt; Next steps:
- Run these three commands in your terminal to add Homebrew to your PATH:
    echo &apos;# Set PATH, MANPATH, etc., for Homebrew.&apos; &gt;&gt; /Users/{your user name}/.zprofile
    echo &apos;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&apos; &gt;&gt; /Users/{your user name}/.zprofile
    eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;
- Run brew help to get started
-…</content:encoded></item></channel></rss>